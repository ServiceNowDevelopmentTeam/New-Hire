trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: 'AAD-and-GitHub-Secrets'
- name: repoName
  value: $(Build.Repository.Name)
- name: branchName
  value: $(Build.SourceBranchName)
- name: azureDevOpsRepoUrl
  value: $(Build.Repository.Uri)
- name: githubUser
  value: $(USER)
- name: githubToken
  value: $(TOKEN)
- name: azureDevOpsPAT
  value: $(AZURE_DEVOPS_PAT)
- name: devInstanceName
  value: 'apigroupdev'
- name: instanceName
  value: 'apigrouptest'

steps:
- script: |
    # Install jq for JSON parsing
    sudo apt-get install -y jq

    # Function to check if the app exists in the given endpoint
    check_app_exists() {
      local endpoint=$1
      response=$(curl -s --user "$(SERVICENOW_USER):$(SERVICENOW_PASSWORD)" "https://$(instanceName).service-now.com${endpoint}")
      echo "$response" | jq -r --arg NAME "$(repoName)" '.result.apps[] | select(.vcs != null and .vcs.url != null and (.vcs.url | endswith($NAME)))'
    }

    # Check if the app exists in the /apps endpoint
    app_info=$(check_app_exists "/api/sn_devstudio/v1/vcs/apps")
    if [ -z "$app_info" ]; then
      # Check if the app exists in the /appsall endpoint
      app_info=$(check_app_exists "/api/sn_devstudio/v1/vcs/appsall")
      if [ -n "$app_info" ]; then
        # Convert the app to development mode
        app_id=$(echo "$app_info" | jq -r '.sysId')
        curl -s --user "$(SERVICENOW_USER):$(SERVICENOW_PASSWORD)" \
          -X POST "https://$(instanceName).service-now.com/api/sn_devstudio/v1/vcs/apps/${app_id}/convertToDevelopmentApp"
      else
        echo "Error: App not found in /apps or /appsall endpoints."
        exit 1
      fi
    else
      app_id=$(echo "$app_info" | jq -r '.sysId')
    fi

    # Check for a sys_repo_config record
    repo_config=$(curl -s --user "$(SERVICENOW_USER):$(SERVICENOW_PASSWORD)" \
      "https://$(instanceName).service-now.com/api/now/table/sys_repo_config?sysparm_query=sys_app=${app_id}")
    if [ "$(echo "$repo_config" | jq -r '.result | length')" -eq 0 ]; then
      # Create a repo config
      curl -s --user "$(SERVICENOW_USER):$(SERVICENOW_PASSWORD)" \
        -X POST "https://$(instanceName).service-now.com/api/now/table/sys_repo_config" \
        --header "Content-Type: application/json" \
        --data "{\"sys_app\":\"${app_id}\",\"vcs_url\":\"https://github.com/ServiceNowDevelopmentTeam/$(repoName).git\"}"
    fi

    # Pull down all remote changes from the repo
    curl -s --user "$(SERVICENOW_USER):$(SERVICENOW_PASSWORD)" \
      -X POST "https://$(instanceName).service-now.com/api/sn_devstudio/vcs/apps/${app_id}/repos/apply" \
      --header "Content-Type: application/json" \
      --data '{"stashMessage": "Auto-import from pipeline", "preserveLocalChanges": true}'

    # Set variables for later use
    repo_id=$(echo "$app_info" | jq -r '.vcs.repoId')
    echo "##vso[task.setvariable variable=APP_ID]$app_id"
    echo "##vso[task.setvariable variable=REPO_ID]$repo_id"
    
    echo "Found application ID: $app_id"
    echo "Found repository ID: $repo_id"
  displayName: 'Check and Convert App, Create Repo Config, Pull Changes'

- script: |
    echo "Cloning the repository from Azure DevOps..."
    cleanedUrl=$(echo $(azureDevOpsRepoUrl) | sed 's/^https:\/\/APi-IT-Community\@dev.azure.com//')
    echo "Using cleaned URL: https://$(azureDevOpsPAT)@dev.azure.com$cleanedUrl"
    git clone https://$(azureDevOpsPAT)@dev.azure.com$cleanedUrl repo
  displayName: 'Clone repository from Azure DevOps'

- script: |
    cd repo
    echo "Setting the remote origin to GitHub..."
    git remote set-url origin https://$(githubUser):$(githubToken)@github.com/ServiceNowDevelopmentTeam/$(repoName).git
    git remote -v

    echo "Checking if repository exists on GitHub..."
    repoExists=$(curl -s -o /dev/null -w "%{http_code}" -u $(githubUser):$(githubToken) https://api.github.com/repos/ServiceNowDevelopmentTeam/$(repoName))
    if [ $repoExists -eq 404 ]; then
      echo "Repository does not exist on GitHub. Creating..."
      curl -u $(githubUser):$(githubToken) https://api.github.com/orgs/ServiceNowDevelopmentTeam/repos -d "{\"name\":\"$(repoName)\"}"
    fi

    echo "Checking if branch exists on GitHub $(branchName)..."
    branchExists=$(git ls-remote --heads origin $(branchName))
    if [ -z "$branchExists" ]; then
      echo "Branch does not exist on GitHub. Creating..."
      git checkout -b $(branchName)
      git push origin $(branchName)
    else
      git checkout $(branchName)
    fi

    echo "Pushing changes to GitHub $(branchName)..."
    for i in {1..5}; do
      git push origin $(branchName) && break || sleep 15
    done

    echo "Setting the default branch to $(branchName) on GitHub..."
    curl -X PATCH -u $(githubUser):$(githubToken) https://api.github.com/repos/ServiceNowDevelopmentTeam/$(repoName) -d "{\"default_branch\":\"$(branchName)\"}"

    if [ "$(branchName)" != "main" ]; then
      echo "Checking if 'main' branch exists on GitHub..."
      mainBranchExists=$(git ls-remote --heads origin main)
      if [ -n "$mainBranchExists" ]; then
        echo "'main' branch exists. Deleting 'main' branch on GitHub..."
        git push origin --delete main
      else
        echo "'main' branch does not exist on GitHub. Nothing to delete."
      fi
    fi
  displayName: 'Set default branch and manage main branch on GitHub'

- script: |
    echo "Applying incoming changes to ServiceNow..."
    curl -X POST \
      "https://$(instanceName).service-now.com/api/sn_devstudio/vcs/apps/$(APP_ID)/repos/$(REPO_ID)/apply" \
      --user "$(SERVICENOW_USER):$(SERVICENOW_PASSWORD)" \
      --header "Content-Type: application/json" \
      --data '{
        "stashMessage": "Auto-import from pipeline",
        "preserveLocalChanges": true
      }'
  displayName: 'Apply incoming changes to ServiceNow'