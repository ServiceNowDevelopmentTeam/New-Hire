<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <ignore_in_now_experience>false</ignore_in_now_experience>
        <name>custom_order_guide_validator</name>
        <script><![CDATA[var orderGuideState = {
    isObserving: false,
    currentLocation: window.location.href,
    errorMessageAdded: false,
    submitButtonInterval: null
};

function watchForOrderGuidePage() {
    var observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.addedNodes.length > 0) {
                var submitButton = document.querySelector("#submit") || 
                                 document.querySelector("button[id='submit']") ||
                                 document.querySelector("button[name='submit']");
                                 
                if (submitButton && !orderGuideState.errorMessageAdded) {
                    orderGuideState.errorMessageAdded = true;
                    manageMandatoryError();
                }
            }
        });
    });

    var config = { 
        childList: true, 
        subtree: true,
        attributes: true
    };

    function checkCurrentPage() {
        if (window.location.href.includes('sc_cat_item_guide')) {
            if (!orderGuideState.isObserving && document.body) {
                observer.observe(document.body, config);
                orderGuideState.isObserving = true;
                
                var submitButton = document.querySelector("#submit") || 
                                 document.querySelector("button[id='submit']") ||
                                 document.querySelector("button[name='submit']");
                if (submitButton && !orderGuideState.errorMessageAdded) {
                    orderGuideState.errorMessageAdded = true;
                    manageMandatoryError();
                }
            }
        } else {
            cleanup();
        }
    }

    function cleanup() {
        if (orderGuideState.isObserving) {
            observer.disconnect();
            orderGuideState.isObserving = false;
        }
        if (orderGuideState.submitButtonInterval) {
            clearInterval(orderGuideState.submitButtonInterval);
            orderGuideState.submitButtonInterval = null;
        }
        orderGuideState.errorMessageAdded = false;
    }

    function initialize() {
        setInterval(function() {
            var newLocation = window.location.href;
            if (newLocation !== orderGuideState.currentLocation) {
                orderGuideState.currentLocation = newLocation;
                cleanup();
                checkCurrentPage();
            }
        }, 500);

        checkCurrentPage();
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        initialize();
    }
}

function manageMandatoryError() {
    var errorDiv = null;
    var submitButton = null;

    function createErrorMessage(container) {
        var existingError = container.querySelector('.mandatory-error-message');
        if (existingError) {
            existingError.remove();
        }

        errorDiv = document.createElement("div");
        errorDiv.className = 'mandatory-error-message';
        errorDiv.style.cssText = `
            color: red;
            font-weight: bold;
            text-align: right;
            margin-top: 5px;
            display: none;
        `;
        errorDiv.textContent = "Complete all required fields (in red) to proceed.";
        container.appendChild(errorDiv);
        return errorDiv;
    }

    function initializeErrorHandling() {
        submitButton = document.querySelector("#submit") || 
                      document.querySelector("button[id='submit']") ||
                      document.querySelector("button[name='submit']");
                      
        if (!submitButton) {
            return false;
        }

        var container = submitButton.parentElement.parentElement;
        errorDiv = createErrorMessage(container);

        if (!orderGuideState.submitButtonInterval) {
            orderGuideState.submitButtonInterval = setInterval(function() {
                if (!submitButton || !errorDiv) {
                    clearInterval(orderGuideState.submitButtonInterval);
                    orderGuideState.submitButtonInterval = null;
                    return;
                }

                var shouldShow = submitButton.disabled;
                if (shouldShow !== (errorDiv.style.display === "block")) {
                    errorDiv.style.display = shouldShow ? "block" : "none";
                }
            }, 1000);
        }

        return true;
    }

    if (!initializeErrorHandling()) {
        var initAttempts = 0;
        var maxAttempts = 20;
        
        var initInterval = setInterval(function() {
            initAttempts++;
            if (initializeErrorHandling() || initAttempts >= maxAttempts) {
                clearInterval(initInterval);
            }
        }, 250);
    }
}

window.addEventListener('unload', function() {
    if (orderGuideState.submitButtonInterval) {
        clearInterval(orderGuideState.submitButtonInterval);
    }
    orderGuideState.isObserving = false;
    orderGuideState.errorMessageAdded = false;
});

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', watchForOrderGuidePage);
} else {
    watchForOrderGuidePage();
}]]></script>
        <script_name/>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2024-11-04 16:34:05</sys_created_on>
        <sys_id>61548daf332d5a509b1810919e5c7bab</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>custom_order_guide_validator</sys_name>
        <sys_package display_value="New Hire" source="7314ba481ba581908c5143f3cc4bcbfe">7314ba481ba581908c5143f3cc4bcbfe</sys_package>
        <sys_policy/>
        <sys_scope display_value="New Hire">7314ba481ba581908c5143f3cc4bcbfe</sys_scope>
        <sys_update_name>sys_ui_script_61548daf332d5a509b1810919e5c7bab</sys_update_name>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2024-11-04 22:09:49</sys_updated_on>
        <ui_type>1</ui_type>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
